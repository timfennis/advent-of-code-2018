// input := read_file("input/13-2.ex");
input := read_file("input/13");
data := [[char for char in line] for line in input.lines()];
width := data[0].len();
height := data.len();

cart_c := "^>v<";
track_c := r"+|-\/";

track := %{};
// Collect all the track
for y in 0..height, x in 0..width {
  if data[y][x] in track_c {
    track[(y, x)] = data[y][x];
  }
}

// Collect the carts
carts := [];
for y in 0..height, x in 0..width {
  cur := data[y][x];
  if cur in cart_c {
    carts.push((y, x, cur, 0));
    if cur in "<>" {
      track[(y, x)] = "-";
    } else {
      track[(y, x)] = "|";
    }
  }
}

fn apply_track(dir, track) {
  if track == "/" and dir == ">" { "^" }
  else if track == "/" and dir == "v" { "<" }
  else if track == "/" and dir == "^" { ">" } 
  else if track == "/" and dir == "<" { "v" } 
  else if track == "\\" and dir == "<" { "^" } 
  else if track == "\\" and dir == "v" { ">" }
  else if track == "\\" and dir == ">" { "v" }
  else if track == "\\" and dir == "^" { "<" }
  else { cur }
}

fn apply_dir(pos, dir) {
  y, x := pos;
  if dir == ">" {
    y, x + 1
  } else if dir == "<" {
    y, x - 1
  } else if dir == "^" {
    y - 1, x
  } else if dir == "v" {
    y + 1, x
  } else {
    assert(false);
  }
}

fn right(dir) {
  if dir == ">" { "v" }
  else if dir == "v" { "<" }
  else if dir == "<" { "^" }
  else if dir == "^" { ">" }
  else { assert(false) }
}

fn left(dir) {
  if dir == ">" { "^" }
  else if dir == "v" { ">" }
  else if dir == "<" { "v" }
  else if dir == "^" { "<" }
  else { assert(false) }
}

fn apply_inter(dir, inter) {
  inter %= 3;
  if inter == 0 { left(dir) }
  else if inter == 1 { dir }
  else if inter == 2 { right(dir) }
  else { assert(false) }
}

first_crash := false;
cycle := 1;
fn tick() {

  next := [];
  carts = carts.sorted();
  while carts.len() > 0 {
    y, x, dir, inter := carts.remove(0);
    ny, nx := apply_dir((y, x), dir);
    obj := track[ny, nx];
    nd, ni := if obj in "-|" {
      dir, inter
    } else if obj in r"\/" {
      apply_track(dir, obj), inter
    } else if obj == "+" {
      apply_inter(dir, inter), (inter + 1)
    }

    col := [1 for y, x, _, _ in carts, if ny == y and nx == x].sum();
    col += [1 for y, x, _, _ in next, if ny == y and nx == x].sum();

    if col > 0 {
      if first_crash == false {
        print("Part 1", (nx, ny));
        first_crash = true;
      }

      // Remove collisions
      carts = [(y, x, d, i) for y, x, d, i in carts, if ny != y and nx != x];
      next = [(y, x, d, i) for y, x, d, i in next, if ny != y and nx != x];
    } else {
      next.push((ny, nx, nd, ni));
    }
  }
  carts = next;
  cycle += 1;
}

fn part2() {
  i := 0;
  fst := false;
  while true {
    tick(); i += 1;

    if carts.len() == 1 {
      // print(carts);
      [(y, x, _, _)] := carts;
      return (x, y);
    }
  }
}

print("Part 2", part2());
